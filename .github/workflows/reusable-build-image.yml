name: Reusable - Build and Push Docker Image

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      image-tag:
        required: true
        type: string
    outputs:
      image_uri:
        description: "The full URI of the pushed ECR image."
        value: ${{ jobs.build-and-push.outputs.image_uri }}
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-and-push.outputs.image }}
    permissions:
      contents: read
      id-token: write # Required for OIDC authentication with AWS

    # Check if the Dockerfile exists.
    if: ${{ hashFiles(format('services/${0}/Dockerfile', inputs.service-name )) != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3 # Should match your common.tfvars

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ inputs.service-name }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.service-name }}:${{ inputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max