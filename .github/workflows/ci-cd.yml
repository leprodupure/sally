name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - 'services/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # This job determines which services have changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed services
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            core-infra:
              - 'services/core-infra/**'
            aquarium-service:
              - 'services/aquarium-service/**'
            # Add other services here as they are created

  check-files-exist:
    needs: detect-changes
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    # This job builds the Docker image if a Dockerfile exists
    if: needs.detect-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.files-exist.outputs.docker }}
      terraform: ${{ steps.files-exist.outputs.terraform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if Dockerfile and terraform/ exists
        id: files-exist
        run: |
          if [ -f "services/${{ matrix.service }}/Dockerfile" ]; then
            echo "docker=true" >> "$GITHUB_OUTPUT"
          else
            echo "docker=false" >> "$GITHUB_OUTPUT"
          fi
          
          if [ -d "services/${{ matrix.service }}/terraform" ]; then
            echo "terraform=true" >> "$GITHUB_OUTPUT"
          else
            echo "terraform=false" >> "$GITHUB_OUTPUT"
          fi

  # This job builds and deploys each changed service
  build-docker:
    needs: [detect-changes, check-files-exist]
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    # This job builds the Docker image if a Dockerfile exists
    if: needs.detect-changes.outputs.services != '[]' && needs.check-files-exist.outputs.docker == 'true'
    uses: ./.github/workflows/reusable-build-image.yml
    with:
      service-name: ${{ matrix.service }}
      # For PRs, create a unique image tag. For main, use the commit SHA.
      image-tag: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || github.sha }}
    secrets: inherit
    permissions:
      contents: read
      id-token: write # Required for OIDC authentication with AWS

  deploy-terraform:
    needs: [detect-changes, check-files-exist, build-docker]
    permissions:
      contents: read
      id-token: write # Required for OIDC authentication with AWS
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    # This job builds the Docker image if terraform/ exists
    if: needs.detect-changes.outputs.services != '[]' && needs.check-files-exist.outputs.terraform == 'true'
    uses: ./.github/workflows/reusable-deploy-terraform.yml
    with:
      service-name: ${{ strategy.matrix.service }}
      # Deploy to a temporary environment for PRs, otherwise deploy to staging
      environment: ${{ github.event_name == 'pull_request' && 'temp' || 'staging' }}
      # Pass the image URI from the build job if it ran
      image-uri: ${{ needs.build.outputs.image_uri || '' }}
    secrets: inherit